/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var marathonExport = /* color: #d6d6d6 */ee.Geometry.Polygon(
        [[[-89.51381422286656, 45.17235954378038],
          [-89.80769850021031, 45.164613914682704],
          [-89.81456495528843, 45.06382488709884],
          [-89.94228101974156, 45.05994483116828],
          [-89.94090772872593, 45.13846464027344],
          [-90.17848707442906, 45.1239320814499],
          [-90.18260694747593, 45.05703461641353],
          [-90.39684034591343, 45.05509439095473],
          [-90.42155958419468, 44.76233996072894],
          [-90.37486768966343, 44.75161305264964],
          [-90.29933668380406, 44.680374932466826],
          [-90.30208326583531, 44.62273483464385],
          [-90.27461744552281, 44.59536016796341],
          [-90.02467848067906, 44.58558037460749],
          [-90.00545240646031, 44.74771186508599],
          [-89.91756178146031, 44.82178940158957],
          [-89.79671217208531, 44.82763357963028],
          [-89.79671217208531, 44.69111505555379],
          [-89.13203932052281, 44.6950200611524],
          [-89.13478590255406, 44.979374249676255],
          [-89.50557447677281, 44.996857015658165]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
wl = ee.Image("users/erker/UTC/marathon_water/water_lines");
wb = ee.Image("users/erker/UTC/marathon_water/water_bodies");

var classProperty = 'class_2010';

var pts = ee.FeatureCollection('users/erkere/marathonShapefiles/marathon_accuracy_training').remap(['G','I','S','T','W'], [0,1,2,3,4], classProperty);

var trainingData = pts.merge(grass).merge(tree).merge(soil).merge(impervious).merge(water);

var testpts = ee.FeatureCollection('users/erker/UTC/marathon_shapefiles/marathon_accuracy_randompoints_20200522').filter(ee.Filter.neq('class_2010', '')).remap(['G','I','S','T','W'], [0,1,2,3,4], 'class_2010');

var buf3000 = function(feature) {return feature.buffer(3000)};
var urbanregion = testpts.map(buf3000);
var naip = ee.ImageCollection('USDA/NAIP/DOQQ').filterBounds(urbanregion); 
var naip05c = naip.filterDate('2005-01-01', '2005-12-31');
var naip08c = naip.filterDate('2008-01-01', '2008-12-31');
var naip10c = naip.filterDate('2010-01-01', '2010-12-31');


var naip05 = naip05c.median().byte();
var naip08 = naip08c.median().byte();
var naip10 = naip10c.median().byte();



var ndvi10 = naip10.normalizedDifference(['N', 'R']);
var gauss53 = ee.Kernel.gaussian({radius: 5, sigma: 3, units: 'pixels', normalize:true});
var naip10Gauss53 = naip10.convolve(gauss53);
var naip08Gauss53 = naip08.convolve(gauss53);
var gauss104 = ee.Kernel.gaussian({radius: 10, sigma: 4, units: 'pixels', normalize:true});
var naip10Gauss104 = naip10.convolve(gauss104);
var naip08Gauss104 = naip08.convolve(gauss104);
var win10 = ee.Kernel.square({radius: 10});
var entro10 = naip10.select('N').entropy(win10);
var win5 = ee.Kernel.square({radius: 5});
var entro5 = naip10.select('N').entropy(win5);
var nir10glcm3 = naip10.select(['N']).glcmTexture({size: 3, average: false});
var contrast3 = nir10glcm3.select('N_contrast_-1_-1', 'N_contrast_0_-1', 'N_contrast_1_-1', 'N_contrast_-1_0');
var nir10glcm7 = naip10.select(['N']).glcmTexture({size: 7, average: false});
var contrast7 = nir10glcm7.select('N_contrast_-1_-1', 'N_contrast_0_-1', 'N_contrast_1_-1', 'N_contrast_-1_0');
var nir10glcm14 = naip10.select(['N']).glcmTexture({size: 14, average: false});
var contrast14 = nir10glcm14.select('N_contrast_-1_-1', 'N_contrast_0_-1', 'N_contrast_1_-1', 'N_contrast_-1_0');

var image = ee.Image.cat([naip05, naip08, naip10, ndvi10, naip10Gauss53, naip10Gauss104, naip08Gauss104, entro10, entro5, contrast3, contrast7, contrast14, wl, wb]);




var training = image.sampleRegions({
  collection: trainingData,
  properties: [classProperty],
  scale: 1
});

training = training.randomColumn();

var split = 0.2;
var training = training.filter(ee.Filter.lt('random', split));
print(training.size());


var trainedClassifier = ee.Classifier.smileRandomForest(100).train({
  features: training,
  classProperty: classProperty,
  inputProperties: image.bandNames()
});

// print(trainedClassifier);
var testpts = ee.FeatureCollection('users/erkere/marathonShapefiles/marathon_accuracy_testing').remap(['G','I','S','T','W'], [0,1,2,3,4], classProperty);
var testing = image.sampleRegions({collection: testpts, properties: [classProperty], scale: 1});
var testingClassified = testing.classify(trainedClassifier);
var testAccuracy = testingClassified.errorMatrix(classProperty, 'classification');
print('Testing error matrix: ', testAccuracy);
print('Testing overall accuracy: ', testAccuracy.accuracy());

// var valpts = ee.FeatureCollection('users/erkere/marathonShapefiles/marathon_accuracy_validation').remap(['G','I','S','T','W'], [0,1,2,3,4], classProperty);
// var validation = image.sampleRegions({collection: valpts, properties: [classProperty], scale: 1});
// var valClassified = validation.classify(trainedClassifier);
// var valAccuracy = valClassified.errorMatrix(classProperty, 'classification');
// print('Validation error matrix: ', valAccuracy);
// print('Validation overall accuracy: ', valAccuracy.accuracy());


var classified = image.classify(trainedClassifier);



Map.addLayer(naip05);
Map.addLayer(naip08);
Map.addLayer(naip10);
Map.addLayer(classified, {min: 0, max: 4, palette: ['yellow', 'red', 'brown','green','blue']});


Export.image.toDrive({
  image: classified,
  description: 'marathon-2010-fullcounty',
  scale: 1,
  region: marathonExport,
  maxPixels: 12000000000,
  crs: 'EPSG:3070'
});


Export.image.toAsset({
  image: classified,
  description: 'marathonClassified2010',
  assetId: 'marathonClassified2010',
  scale: 1,
  maxPixels: 12000000000,
  region: marathonExport,
  pyramidingPolicy: {
    'classification': 'mode'
  }
});

