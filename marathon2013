/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var wb = ee.Image("users/erker/UTC/marathon_water/water_bodies"),
    wl = ee.Image("users/erker/UTC/marathon_water/water_lines"),
    height = ee.Image("users/erker/UTC/marathonHeight/marathon2012Height");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var pts = ee.FeatureCollection('users/erker/UTC/marathon_shapefiles/marathon_combined_sub_50k');
var pts = pts.remap([1,2,3,4,5], [0,1,2,3,4], 'class_2010');


var trainingData = pts //.merge(grass).merge(tree).merge(soil).merge(impervious).merge(water);


var testpts = ee.FeatureCollection('users/erker/UTC/marathon_shapefiles/marathon_accuracy_randompoints_20200522').filter(ee.Filter.neq('class_2010', '')).remap(['G','I','S','T','W'], [0,1,2,3,4], 'class_2010');

var naip = ee.ImageCollection('USDA/NAIP/DOQQ').filterBounds(testpts);  // testpts has greater extent than pts
var naip13c = naip.filterDate('2013-01-01', '2013-12-31');
var naip15c = naip.filterDate('2015-01-01', '2015-12-31');


var naip13 = naip13c.median().byte();
var naip15 = naip15c.median().byte();


var ndvi13 = naip13.normalizedDifference(['N', 'R']);
var gauss53 = ee.Kernel.gaussian({radius: 5, sigma: 3, units: 'pixels', normalize:true});
var naip13Gauss53 = naip13.convolve(gauss53);
var naip15Gauss53 = naip15.convolve(gauss53);
var gauss104 = ee.Kernel.gaussian({radius: 10, sigma: 4, units: 'pixels', normalize:true});
var naip13Gauss104 = naip13.convolve(gauss104);
var naip15Gauss104 = naip15.convolve(gauss104);
var win10 = ee.Kernel.square({radius: 10});
var entro10 = naip13.select('N').entropy(win10);
var win5 = ee.Kernel.square({radius: 5});
var entro5 = naip13.select('N').entropy(win5);
var nir13glcm3 = naip13.select(['N']).glcmTexture({size: 3, average: false});
var contrast3 = nir13glcm3.select('N_contrast_-1_-1', 'N_contrast_0_-1', 'N_contrast_1_-1', 'N_contrast_-1_0');
var nir13glcm7 = naip13.select(['N']).glcmTexture({size: 7, average: false});
var contrast7 = nir13glcm7.select('N_contrast_-1_-1', 'N_contrast_0_-1', 'N_contrast_1_-1', 'N_contrast_-1_0');
var nir13glcm14 = naip13.select(['N']).glcmTexture({size: 14, average: false});
var contrast14 = nir13glcm14.select('N_contrast_-1_-1', 'N_contrast_0_-1', 'N_contrast_1_-1', 'N_contrast_-1_0');

var image = ee.Image.cat([naip13, naip15, ndvi13, naip13Gauss53, naip13Gauss104, naip15Gauss104, entro10, entro5, contrast3, contrast7, contrast14, wl, wb, height]);


var classProperty = 'class_2013';


var training = image.sampleRegions({
  collection: trainingData,
  properties: [classProperty],
  scale: 1
});

// training = training.randomColumn();
// var split = 0.5;
// var training = training.filter(ee.Filter.lt('random', split));
// print(training.size());


var trainedClassifier = ee.Classifier.smileRandomForest(100).train({
  features: training,
  classProperty: classProperty,
  inputProperties: image.bandNames()
});

// print(trainedClassifier);

var testing = image.sampleRegions({collection: testpts, properties: [classProperty], scale: 1});
var testClassified = testing.classify(trainedClassifier);
var testAccuracy = testClassified.errorMatrix('class_2010', 'classification');
print('Validation error matrix: ', testAccuracy);
print('Validation overall accuracy: ', testAccuracy.accuracy());


var classified = image.classify(trainedClassifier);



Map.addLayer(naip05);
Map.addLayer(naip08);
Map.addLayer(naip10);
Map.addLayer(classified, {min: 0, max: 4, palette: ['yellow', 'red', 'brown','green','blue']});



// Export.image.toDrive({
//   image: classified,
//   description: 'marathon-2010-5',
//   scale: 1,
// });



// // // // // Export.image.toDrive({
// // // // //   image: classified,
// // // // //   description: 'active2010-4',
// // // // //   scale: 1,
// // // // //   maxPixels: 12000000000
// // // // //             //  region: 
// // // // // });


