// I need to upload water layer
var grass = /* color: #fffe58 */geometry2,
    tree = /* color: #2ca919 */geometry3,
    soil = /* color: #d6b257 */geometry5,
    impervious = /* color: #ff3e0c */geometry4,
    water = /* color: #1d65f7 */geometry;

var pts = ee.FeatureCollection('users/erker/UTC/marathon_shapefiles/marathon_combined_sub_10k');
var testpts = ee.FeatureCollection('users/erker/UTC/marathon_shapefiles/marathon_accuracy_randompoints_20200522').filter(ee.Filter.neq('class_2017', '')).remap(['G','I','S','T','W'], [0,1,2,3,4], 'class_2017');

var naip = ee.ImageCollection('USDA/NAIP/DOQQ').filterBounds(testpts);  // testpts has greater extent than pts
var naip17c = naip.filterDate('2017-01-01', '2017-12-31');
var naip18c = naip.filterDate('2018-01-01', '2018-12-31');
var pts = pts.remap([1,2,3,4,5], [0,1,2,3,4], 'class_2017');

var grass = ee.Feature(grass).set('class_2017', 0);

var pts = pts.merge(grass).merge(tree).merge(soil).merge(impervious).merge(water);

var naip17 = naip17c.median().byte();
var naip18 = naip18c.median().byte();



var ndvi = naip17.normalizedDifference(['N', 'R']);
var gauss53 = ee.Kernel.gaussian({radius: 5, sigma: 3, units: 'pixels', normalize:true});
var naip17Gauss53 = naip17.convolve(gauss53);
var naip18Gauss53 = naip18.convolve(gauss53);
var gauss104 = ee.Kernel.gaussian({radius: 10, sigma: 4, units: 'pixels', normalize:true});
var naip17Gauss104 = naip17.convolve(gauss104);
var naip18Gauss104 = naip18.convolve(gauss104);
var win10 = ee.Kernel.square({radius: 10});
var entro10 = naip17.select('N').entropy(win10);
var win5 = ee.Kernel.square({radius: 5});
var entro5 = naip17.select('N').entropy(win5);
var nir17glcm3 = naip17.select(['N']).glcmTexture({size: 3, average: false});
var contrast3 = nir17glcm3.select('N_contrast_-1_-1', 'N_contrast_0_-1', 'N_contrast_1_-1', 'N_contrast_-1_0');
var nir17glcm7 = naip17.select(['N']).glcmTexture({size: 7, average: false});
var contrast7 = nir17glcm7.select('N_contrast_-1_-1', 'N_contrast_0_-1', 'N_contrast_1_-1', 'N_contrast_-1_0');

var image = ee.Image.cat([naip17, naip18, ndvi, naip17Gauss53, naip17Gauss104, naip18Gauss104, entro10, entro5, contrast3, contrast7]);


var classProperty = 'class_2017';

var training = image.sampleRegions({
  collection: pts,
  properties: [classProperty],
  scale: 1
});
print(training.size());


var trainedClassifier = ee.Classifier.smileRandomForest(100).train({
  features: training,
  classProperty: classProperty,
  inputProperties: image.bandNames()
});

// print(trainedClassifier);

var testing = image.sampleRegions({collection: testpts, properties: [classProperty], scale: 1});
var testClassified = testing.classify(trainedClassifier);
var testAccuracy = testClassified.errorMatrix('class_2017', 'classification');
print('Validation error matrix: ', testAccuracy);
print('Validation overall accuracy: ', testAccuracy.accuracy());


var classified = image.classify(trainedClassifier);




// Map.centerObject(pts, 24);
Map.addLayer(naip17);
//Map.addLayer(naip18);
Map.addLayer(classified, {min: 0, max: 4, palette: ['yellow', 'red', 'brown','green','blue']});



Export.image.toDrive({
  image: classified,
  description: 'elderon',
  scale: 1,
  region: elderon
});



// // Export.image.toDrive({
// //   image: classified,
// //   description: 'active2017-4',
// //   scale: 1,
// //   maxPixels: 12000000000
// //             //  region: 
// // });


