var milwaukeeExport = ee.Geometry.Polygon(
        [[[-88.35575750089527, 43.35209206347098],
          [-88.35575750089527, 42.80743795582355],
          [-87.76249578214527, 42.80743795582355],
          [-87.76249578214527, 43.35209206347098]]], null, false),
    wb = ee.Image("users/erker/milwaukee/milwaukee_water/mke_water_bodies_26916_input"),
    wl = ee.Image("users/erker/milwaukee/milwaukee_water/mke_water_lines_26916_input");


var pts = ee.FeatureCollection('users/erker/milwaukee/milwaukee_shapefiles/milwaukee_accuracy_training');

var classProperty = 'class_2013';

var pts = pts.remap(['G','I','S','T','W'], [0,1,2,3,4], classProperty);


var testpts = ee.FeatureCollection('users/erker/milwaukee/milwaukee_shapefiles/milwaukee_accuracy_testing').filter(ee.Filter.neq(classProperty, '')).remap(['G','I','S','T','W'], [0,1,2,3,4], classProperty);
// var testpts = testpts.randomColumn();
// testpts =  testpts.filter(ee.Filter.lt('random', 0.2));
// print(testpts.size());



var buf3000 = function(feature) {return feature.buffer(3000)};
var urbanregion = testpts.map(buf3000);
var naip = ee.ImageCollection('USDA/NAIP/DOQQ').filterBounds(urbanregion); 
var naip13c = naip.filterDate('2013-01-01', '2013-12-31');



var naip13 = naip13c.median().byte();


var ndvi13 = naip13.normalizedDifference(['N', 'R']);
var gauss53 = ee.Kernel.gaussian({radius: 5, sigma: 3, units: 'pixels', normalize:true});
var naip13Gauss53 = naip13.convolve(gauss53);

var gauss104 = ee.Kernel.gaussian({radius: 10, sigma: 4, units: 'pixels', normalize:true});
var naip13Gauss104 = naip13.convolve(gauss104);

var win10 = ee.Kernel.square({radius: 10});
var entro10 = naip13.select('N').entropy(win10);

var win5 = ee.Kernel.square({radius: 5});
var entro5 = naip13.select('N').entropy(win5);

var nir13glcm3 = naip13.select(['N']).glcmTexture({size: 3, average: false});
var contrast3 = nir13glcm3.select('N_contrast_-1_-1', 'N_contrast_0_-1', 'N_contrast_1_-1', 'N_contrast_-1_0');
var nir13glcm7 = naip13.select(['N']).glcmTexture({size: 7, average: false});
var contrast7 = nir13glcm7.select('N_contrast_-1_-1', 'N_contrast_0_-1', 'N_contrast_1_-1', 'N_contrast_-1_0');
var nir13glcm14 = naip13.select(['N']).glcmTexture({size: 14, average: false});
var contrast14 = nir13glcm14.select('N_contrast_-1_-1', 'N_contrast_0_-1', 'N_contrast_1_-1', 'N_contrast_-1_0');

// var image = ee.Image.cat([naip13, ndvi13, naip13Gauss53, entro10, entro5, contrast7, contrast14, wl, wb]);
var image = naip13;
print(image);

// var training = image.sampleRegions({
//   collection: trainingData,
//   properties: [classProperty],
//   scale: 1
// });


// var trainingGrass = image.sampleRegions({collection: grass, properties: [classProperty], scale: 1}).randomColumn().filter(ee.Filter.lt('random', 1));
// var trainingImpervious = image.sampleRegions({collection: impervious, properties: [classProperty], scale: 1}).randomColumn().filter(ee.Filter.lt('random', 1));
// var trainingSoil = image.sampleRegions({collection: soil, properties: [classProperty], scale: 1}).randomColumn().filter(ee.Filter.lt('random', 1));
// var trainingTree = image.sampleRegions({collection: tree, properties: [classProperty], scale: 1}).randomColumn().filter(ee.Filter.lt('random', 1));
// var trainingWater = image.sampleRegions({collection: water, properties: [classProperty], scale: 1}).randomColumn().filter(ee.Filter.lt('random', 1));
var trainingPts = image.sampleRegions({collection: pts, properties: [classProperty], scale: 1}); //.randomColumn().filter(ee.Filter.lt('random', 0.));

// var training = trainingPts.merge(trainingGrass).merge(trainingTree).merge(trainingSoil).merge(trainingImpervious).merge(trainingWater);
var training = trainingPts
print(training.size());


var trainedClassifier = ee.Classifier.smileRandomForest(100).train({
  features: training,
  classProperty: classProperty,
  inputProperties: image.bandNames()
});

print(trainedClassifier);

var testing = image.sampleRegions({collection: testpts, properties: [classProperty], scale: 1});

var testClassified = testing.classify(trainedClassifier);
var testAccuracy = testClassified.errorMatrix(classProperty, 'classification');
print('testing error matrix: ', testAccuracy);
print('testing overall accuracy: ', testAccuracy.accuracy());


var classified = image.classify(trainedClassifier);
print(classified);

Map.addLayer(naip13);
// Map.addLayer(classified, {min: 0, max: 4, palette: ['yellow', 'red', 'brown','green','blue']});

//Map.addLayer(errors);

// // Export.image.toDrive({
// //   image: classified,
// //   description: 'marathon-2010-5',
// //   scale: 1,
// // });


// // Export.image.toDrive({
// //   image: classified,
// //   description: 'milwaukee-2010-fullcounty',
// //   scale: 1,
// //   maxPixels: 12000000000,
// //   crs: 'EPSG:3070'
// // });


// // Export.image.toAsset({
// //   image: classified,
// //   description: 'milwaukeeClassified2010',
// //   assetId: 'milwaukeeClassified2010',
// //   scale: 1,
// //   region: marathonExport,
// //   pyramidingPolicy: {
// //     'classification': 'mode'
// //   }
// // });